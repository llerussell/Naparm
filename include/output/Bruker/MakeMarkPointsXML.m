function MakeMarkPointsXML(handles)
SaveName        = [handles.data.NaparmDirectory filesep handles.data.ExperimentIdentifier];
NumGroups       = numel(unique(handles.points.Group));
NumCellsPerGroup = histc(handles.points.Group, unique(handles.points.Group));
SequenceRepetitions = str2double(handles.SequenceRepetitions_Edit.String);
NumRows         = NumGroups * SequenceRepetitions;
ShotsPerPattern = str2double(handles.ShotsPerPattern_Edit.String);
InterPatternShotInterval = str2double(handles.InterPatternShotInterval_Edit.String);
LaserPowerMW      = str2double(handles.LaserPowerMW_Edit.String);
LaserPowerPV    = round(mw2pv(LaserPowerMW));
TrigOnEach      = handles.TriggerEach_ToggleButton.Value;
InitialDelay    = str2double(handles.InitialDelay_Edit.String);
SpiralDuration  = str2double(handles.SpiralDuration_Edit.String);
NumberOfTrials  = str2double(handles.NumberOfTrials_Edit.String);
SpiralRevolutions = num2str(handles.SpiralRevolutions_Edit.String);
AddDummy         = handles.AddDummy_Checkbox.Value;
ChangePatternEvery = str2double(handles.ChangePatternEvery_Edit.String);
IterationDelay = 0;
InterPointDelay = max([0, InterPatternShotInterval-SpiralDuration]);

% get parameters stored in settings file
yaml = ReadYaml('settings.yml');
VoltageOutputCategoryName = yaml.VoltageOutputCategoryName;
VoltageOutputExperimentName = yaml.VoltageOutputExperimentName;
LaserName = yaml.LaserName;
TrigLine = yaml.TriggerLine;

if ~TrigOnEach
    TriggerFreq                 = [{'First Repetition'} ; repmat({'None'}, NumRows-1, 1)];
    TriggerSelect               = [{TrigLine} ; repmat({'None'}, NumRows-1, 1)];
    AsyncSyncFrequency          = [{'FirstRepetition'} ; repmat({'None'}, NumRows-1, 1)];
    VoltageOutputCategoryName   = [{VoltageOutputCategoryName} ; repmat({'None'}, NumRows-1, 1)];
    VoltageOutputExperimentName = [{VoltageOutputExperimentName} ; repmat({'None'}, NumRows-1, 1)];
    InitialDelay                = [InitialDelay ; repmat((ChangePatternEvery-(ShotsPerPattern*(SpiralDuration+InterPointDelay))), NumRows-1, 1)];
elseif TrigOnEach
    TriggerFreq                 = repmat({'First Repetition'}, NumRows, 1);
    TriggerSelect               = repmat({TrigLine}, NumRows, 1);
    AsyncSyncFrequency          = repmat({'FirstRepetition'}, NumRows, 1);
    VoltageOutputCategoryName   = repmat({VoltageOutputCategoryName}, NumRows, 1);
    VoltageOutputExperimentName = repmat({VoltageOutputExperimentName}, NumRows, 1);
end

Indices = repmat(1:NumGroups,1,SequenceRepetitions)';
PointNums = repmat(1:NumGroups,1,SequenceRepetitions)';
Points = cell(NumRows,1);
for p = 1:NumRows
    Points{p} = ['Point ' num2str(PointNums(p))];
end

Powers = [];
for p = 1:NumRows
    Powers(p) = NumCellsPerGroup(Indices(p)) * str2double(handles.LaserPowerMW_Edit.String);
    Powers(p) = round(mw2pv(Powers(p)));
end

Name = [...
    num2str(NumGroups) 'Patterns_' ...
    num2str(SequenceRepetitions) 'Repeats_x'...
    num2str(ShotsPerPattern) 'ShotPerPattern'...
    ];

MarkPoints_XMLMaker(...
    'SaveName', SaveName, ...
    'ExptCat', 'NAPARM', ...
    'ExptName', Name, ...
    'NumRows', NumRows, ...
    'AddDummy', AddDummy, ...
    'UncagingLaser', LaserName,...
    'UncagingLaserPower', Powers, ...
    'InternalIterations',SequenceRepetitions, ...
    'Repetitions', ShotsPerPattern, ...
    'InitialDelay', InitialDelay, ...
    'Duration', SpiralDuration, ...
    'InterPointDelay', InterPointDelay, ...
    'SpiralRevolutions', SpiralRevolutions, ...
    'TriggerFrequency', TriggerFreq, ...
    'TriggerSelection', TriggerSelect, ...
    'AsyncSyncFrequency', AsyncSyncFrequency, ...
    'VoltageOutputCategoryName', VoltageOutputCategoryName, ...
    'VoltageOutputExperimentName', VoltageOutputExperimentName, ...
    'Indices', Indices, ...
    'Points', Points, ...
    'Iterations', NumberOfTrials, ...
    'IterationDelay',IterationDelay ...
    );
